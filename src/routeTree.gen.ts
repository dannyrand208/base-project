/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppUsersRouteImport } from './routes/_app/users'
import { Route as AppLanguagesRouteImport } from './routes/_app/languages'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AppUsersRoute = AppUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AppRoute,
} as any)
const AppLanguagesRoute = AppLanguagesRouteImport.update({
  id: '/languages',
  path: '/languages',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/languages': typeof AppLanguagesRoute
  '/users': typeof AppUsersRoute
  '/login': typeof AuthLoginRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/languages': typeof AppLanguagesRoute
  '/users': typeof AppUsersRoute
  '/login': typeof AuthLoginRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_app/languages': typeof AppLanguagesRoute
  '/_app/users': typeof AppUsersRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/languages' | '/users' | '/login' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/languages' | '/users' | '/login' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/languages'
    | '/_app/users'
    | '/_auth/login'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/users': {
      id: '/_app/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AppUsersRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/languages': {
      id: '/_app/languages'
      path: '/languages'
      fullPath: '/languages'
      preLoaderRoute: typeof AppLanguagesRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppLanguagesRoute: typeof AppLanguagesRoute
  AppUsersRoute: typeof AppUsersRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppLanguagesRoute: AppLanguagesRoute,
  AppUsersRoute: AppUsersRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
